input {
  beats {
    port => "5044"
  }
}
filter {
##test
  ruby {
    init => "require 'socket'"
    code => "
                unless event.get('message').nil?
                  event.set('message_size', event.get('message').bytesize)
                end
                event.set('hub', Socket.gethostname)
            "
  }
  
  grok {
    match => {
      "message" => "^%{NUMBER}\s*<%{NUMBER:priority}>%{NUMBER}\s*%{TIMESTAMP_ISO8601:timestamp}\s*%{HOSTNAME:hostname}\s*%{NOTSPACE:tag}\s*%{GREEDYDATA:msg_log}$"
    }
  }

 if (  "[INFO ]" in [msg_log] or "info" in [msg_log] or "INFO" in  [msg_log]  ){
    mutate {
      add_field => {
        "severity" => "INFO"
      }
    }
  } else if ("[DEBUG ]" in [msg_log] or "debug" in [msg_log] or "DEBUG" in  [msg_log] ) {
    mutate {
      add_field => {
        "severity" => "DEBUG"
      }
    }  
  }  else if ("[VERBOSE ]" in [msg_log] or "verbose" in [msg_log] or "VERBOSE" in  [msg_log] ) {
    mutate {
      add_field => {
        "severity" => "VERBOSE"
      }
    }  
  } else if ("[WARNING ]" in [msg_log] or "[WARN ]" in [msg_log] or "warning" in [msg_log] or "warn" in [msg_log] or "WARNING" in  [msg_log]  or "WARN" in  [msg_log] ) {
    mutate {
      add_field => {
        "severity" => "WARNING"
      }
    }  
  } else if ("[ERROR ]" in [msg_log] or "error" in [msg_log] or "ERROR" in  [msg_log] ) {
    mutate {
      add_field => {
        "severity" => "ERROR"
      }
    }  
  }

  mutate {
    add_field => {
      "nomehost" => "PIPELINE1"
    }
  }

   mutate {
    add_field => {
      "nomehost" => "PIPELINE2"
    }
  }

  ruby {
    init => "require 'socket'"
    code => "
        current_value = event.get('hub')
        new_value = Socket.gethostname

        if current_value.nil?
            event.set('hub', new_value)
        elsif current_value.is_a?(Array)
            current_value << new_value
            event.set('hub', current_value)
        else
            event.set('hub', [current_value, new_value])
        end
            "
  }
  
}

output {
  elasticsearch {
    hosts => "https://localhost:9200"
    user => "elastic"
    password => "8PSamhKm-Zvg5UwxvCld"
    index => "syslog-index1"
    ssl_enabled => true
    ssl_certificate_authorities => '/home/federica/ELASTIC/ELASTIC-8.15/elasticsearch-8.15.2/config/certs/http_ca.crt'

  }
}